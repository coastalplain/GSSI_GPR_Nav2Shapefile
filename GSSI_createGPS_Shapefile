##
## The script below is meant to be run in R
## Currently, it is being tested on a 32-bit Windows installation
## M. Scott Harris, Ph.D.  ScottHarrisGEO-gmail
##


#INSTALL PACKAGES NOT YET INSTALLED
#FROM:  http://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
   list.of.packages <- c("rgdal", "sp", "maptools", "rgeos", "tcltk", "stringi", "stringr")
   new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
   if(length(new.packages)) install.packages(new.packages)

#LOAD LIBRARIES
library(rgdal)
library(sp)
library(maptools)
library(rgeos)
library(tcltk)
library(stringi)
library(stringr)

##Set your parent (upper level) GPR directory
parent.folder <- choose.dir(getwd(), "Choose Starting Point for Search")
setwd(parent.folder)

##Set your final Point Shapefile Destination Folder
final.folder <- "K:/Dropbox/Data/GPR" #choose.dir(getwd(), "FINAL Output Folder for the corDataAll shapefile")

##Obtain the list of all _POS.csv files in the directories and sub-directories
##  in preparation for the loop to create all shapefiles from the COR files
fileList.full <- dir(pattern="_POS.CSV$", recursive = TRUE, ignore.case = TRUE, include.dirs=TRUE)
       #summary(fileList)  ##shows the Length Class and Mode of the dataframe
       #head(fileList)  ##shows the first few rows of the dataframe
       #fileList[12]  ##brings out element 12 in the file list
fileCount <- NROW(fileList.full)  #how many files will need to be processed, use as counter
startTime <- format(Sys.time(), format="%Y%m%d%H%M%S")
fileList <- vector()
computerName <- Sys.getenv("COMPUTERNAME")
############################################################################################
##########Large loop to check for any files at all.  If not, end this craziness
#########################
fileCount
fileList
if(fileCount > 0){

print("Have Files...am continuing")

##Filter out files that have to small a size (aka no GPS coords) file.info(fileList[i])$size = 0
for (i in 1:length(fileList.full)) {
     if (file.info(fileList.full[i])$size > 47)
     fileList <- c(fileList, fileList.full[i])
}

## Begin Loop for each COR file
for (i in 1:length(fileList)) {
     print(i)
     fileList[i]
     gssi.cor.working <- fileList[i]  #full path and filename
     gssi.cor.filename <- basename(gssi.cor.working)  #filename only
     gssi.cor.path <- dirname(gssi.cor.working)  #directory only
     
  if(gssi.cor.path != ".") {
     gssi.cor.fullpath <- paste(getwd(),"/",gssi.cor.path,"/", sep="", collapse=NULL)
     } else {
     gssi.cor.fullpath <- getwd()
     }
     
     gssi.cor.shapefile <- paste("pt_",gssi.cor.filename, sep="", collapse=NULL)
     
     print(gssi.cor.filename)

     ##http://stackoverflow.com/questions/30127293/how-to-convert-csv-to-shp-in-r
     ##some code was pulled from @iembry off the above weblink and modified

#READ IN THE DATA
     corData <- read.csv(file=gssi.cor.working, header=FALSE,sep=",", skip=1)
     class(corData)  #just shows that the data are in a data.frame

#REMOVE ALL LINES WITH NO Latitude or Longitude or ShotPoint
     #  That is, V1, V2, or V4     V3, as altitude, can be 0
     ## GSSI FORMAT:  LAT(dddmm.m)   LONG(dddmm.m)   Z(M) SCAN#
     ## GSSI FORMAT       V1             V2           V3    V4
     ## GSSI FORMAT      latitude     longitude    Zmeters  ShotPoint
     
     names(corData) <- c("latitude","longitude","Zmeters","ShotPoint")
     corData <- corData[!corData$latitude == "0", ]
     corData <- corData[!corData$longitude == "0", ]

     ##Add the header information
     corData$filepath <- gssi.cor.fullpath
     corData$filename <- gssi.cor.filename
     corData$fileID <- paste(corData[1:1,c("V2")],"_",gssi.cor.filename, sep="")
     corData$computerName <- computerName
     names(corData) <- c("latitude","longitude","Zmeters","ShotPoint","filePath","fileName","fileID","Computer")

    #Convert GSSI decimal minutes data to decimal degrees for geography
      corData$longitude <- sign(corData$longitude)*((abs(trunc(corData$longitude/100))) + ((abs(corData$longitude) - (abs(trunc(corData$longitude/100)))*100)/60))
      corData$latitude <-  sign(corData$latitude)*((abs(trunc(corData$latitude/100))) + ((abs(corData$latitude) - (abs(trunc(corData$latitude/100)))*100)/60))  

     ##making a large dataframe of all processed data, then convert to a shapefile
     if (i == 1) {
          corDataAll <- corData
     } else {
          #build a large dataframe with all datapoints to be changed to a shapefile in last step
          corDataAll <- rbind(corDataAll, corData)
             }

##create a spatial class and export to a shapefile
     coordinates(corData)<-~longitude+latitude
     gssi.cor.shapefile.NewName <- paste(startTime,"_",gssi.cor.shapefile, sep="", collapse=NULL)
     #UNCOMMENT next line if you want to create a shapefile in each folder from each COR file
     #writeOGR(corData, gssi.cor.path, gssi.cor.shapefile.NewName, driver = "ESRI Shapefile")
}  #end of for loop

##Write out the final Shapefile with all files processed
  coordinates(corDataAll)<-~longitude+latitude
  class(corDataAll)
  gssi.cor.shapefile.all <- paste("ptGPRall_",startTime, sep="", collapse=NULL)
  setwd(final.folder)
  writeOGR(corDataAll, getwd(), gssi.cor.shapefile.all, driver = "ESRI Shapefile")
  
#COPY WGS 1984 projection file from final.folder (hard wired into code)
  fileProjection <- paste(gssi.cor.shapefile.all,".prj")
  fileProjection <- gsub(" ","",fileProjection)
  file.copy("wgs1984.prj",fileProjection)
  print("Projection file exported for WGS 1984 -- mofify accordingly")

print("After SECOND write to final.folder")

} ## END OF LARGE CRAZINESS

print("Done with searching ",parent.folder)
#end of R script 
