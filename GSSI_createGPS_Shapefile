##
## The script below is meant to be run in R
## Currently, it is being tested on a 32-bit Windows installation
## M. Scott Harris, Ph.D.  ScottHarrisGEO-gmail
##


#INSTALL PACKAGES NOT YET INSTALLED
#FROM:  http://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
list.of.packages <- c("rgdal", "sp", "maptools", "rgeos")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

#LIST INSTALLED PACKAGES (just for fun, really)
#FROM: https://www.r-bloggers.com/list-of-user-installed-r-packages-and-their-versions/
#ip <- as.data.frame(installed.packages()[,c(1,3:4)])
#rownames(ip) <- NULL
#ip <- ip[is.na(ip$Priority),1:2,drop=FALSE]
#print(ip, row.names=FALSE)

#LOAD LIBRARIES
library(rgdal)
library(sp)
library(maptools)
library(rgeos)

##Set your parent (upper level) GPR directory
## NOTICE slash orientation....

##parent.folder = "//cainhoy/data/BigProjectData/GPR_Data/_Process01"  #example if you use a network share
parent.folder = "O:/ScottDropbox/Dropbox/Presentations/Former/GSA2012_CP_EWrightLead/"
setwd(parent.folder)

##Obtain the list of all _POS.csv files in the directories and sub-directories
##  in preparation for the loop to create all shapefiles from the COR files
fileList.full <- dir(pattern="_POS.CSV$", recursive = TRUE, ignore.case = TRUE, include.dirs=TRUE)
       #summary(fileList)  ##shows the Length Class and Mode of the dataframe
       #head(fileList)  ##shows the first few rows of the dataframe
       #fileList[12]  ##brings out element 12 in the file list
fileCount <- NROW(fileList.full)  #how many files will need to be processed, use as counter
startTime <- format(Sys.time(), format="%Y%m%d%H%M%S")
fileList <- vector()

##Filter out files that have 0 size (aka no GPS coords) file.info(fileList[i])$size = 0
for (i in 1:length(fileList.full)) {
if (file.info(fileList.full[i])$size > 39)
fileList <- c(fileList, fileList.full[i])
}

## Begin Loop for each COR file
for (i in 1:length(fileList)) {

     fileList[i]
     gssi.cor.working <- fileList[i]  #full path and filename
     gssi.cor.filename <- basename(gssi.cor.working)  #filename only
     gssi.cor.path <- dirname(gssi.cor.working)  #directory only
     gssi.cor.fullpath <- paste(getwd(),"/",gssi.cor.path,"/", sep="", collapse=NULL)
     gssi.cor.shapefile <- paste("pt_",gssi.cor.filename, sep="", collapse=NULL)

     ##http://stackoverflow.com/questions/30127293/how-to-convert-csv-to-shp-in-r
     ##some code was pulled from @iembry off the above weblink and modified

     #READ IN THE DATA
     corData <- read.table(file=gssi.cor.working, header=FALSE,sep=",", skip=1)
     class(corData)  #just shows that the data are in a data.frame
     
     #REMOVE ALL LINES WITH NO Latitude or Longitude or ShotPoint
     #  That is, V1, V2, or V4     V3, as altitude, can be 0
     ## GSSI FORMAT:  LAT(dddmm.m)   LONG(dddmm.m)   Z(M) SCAN#
     ## GSSI FORMAT       V1             V2           V3    V4
     ## GSSI FORMAT      latitude     longitude    Zmeters  ShotPoint
     
     names(corData) <- c("latitude","longitude","Zmeters","ShotPoint")
     corData <- corData[!corData$latitude == "0", ]
     corData <- corData[!corData$longitude == "0", ]

     ##Add the header information
     corData$filepath <- gssi.cor.fullpath
     corData$filename <- gssi.cor.filename
     corData$fileID <- paste(corData[1:1,c("V2")],"_",gssi.cor.filename, sep="")

     ## GSSI FORMAT:  LAT(dddmm.m)   LONG(dddmm.m)   Z(M) SCAN#
     ## GSSI FORMAT       V1             V2           V3    V4
     names(corData) <- c("latitude","longitude","Zmeters","ShotPoint","filePath","fileName","fileID")
     # Split the ddmm.mmmmmm and -ddmm.mmmmmm vectors
       corData$latitude <- as.numeric(substr(corData$latitude, 1, 2))+(as.numeric(substr(corData$latitude,3,9))/60)
       corData$longitude <- (as.numeric(substr(corData$longitude, 1, 3))*-1)+(as.numeric(substr(corData$longitude,4,12))/60)
       corData$longitude <- corData$longitude*(-1)

     ##making a large dataframe of all processed data, then convert to a shapefile
     if (i == 1) {
          corDataAll <- corData
     } else {
          #build a large dataframe with all datapoints to be changed to a shapefile in last step
          corDataAll <- rbind(corDataAll, corData)
             }

     ##create a spatial class and export to a shapefile
     coordinates(corData)<-~longitude+latitude
     class(corData)  #check to see that indeed a spatial file was produced
     
     shpSuffix <- ".shp"
     shpFileName <- paste(gssi.cor.shapefile, shpSuffix, sep = "")
     shpFileName
     
     if (!file.exists(shpFileName)) {
        print("inLoop")
        writeOGR(corData, gssi.cor.path, gssi.cor.shapefile, driver = "ESRI Shapefile")
        }
     
}  #end of for loop

##Write out the final Shapefile with all files processed

coordinates(corDataAll)<-~longitude+latitude
class(corDataAll)
gssi.cor.shapefile.all <- paste("ptGPRall_",startTime, sep="", collapse=NULL)
writeOGR(corDataAll, getwd(), gssi.cor.shapefile.all, driver = "ESRI Shapefile")

#end of R script
